{
  "hash": "5b4b8599afe7beae727945d381ac6757",
  "result": {
    "markdown": "---\ntitle: \"Creating a Basic For Loop\"\nauthor: \n  - name: \"Daphne Virlar-Knight\"\n    orcid: \"0000-0003-3708-6154\"\n\nabstract: \"Learn how to write a `for` loop when you're dealing with numeric values.\"\n\ndate: \"Sep 5, 2022\"\ndate-format: MMMM D, YYYY\n\nimage: ../images/basic-for-loop.png\n\ncategories: iteration\n---\n\n\n------------------------------------------------------------------------\n\nOne of the key tenets of programming is the DRY principle: **D**on't **R**epeat **Y**ourself. Essentially, this boils down to not repeating your code ad nauseum to change only one or two things. This is particularly useful for computationally intensive workflows that would require changing tens or hundreds of items. That's where the `for` loop comes into play.\n\nFirst, let's look at the basic syntax of a `for` loop. When you write one, you're telling the computer \"run this piece of code (`statement`) some number of times (`range_of_values`) in this spot (`value`).\"\n\n::: callout-tip\n#### Syntax\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(value in range_of_values){\n  statement \n  print(statement) \n}\n```\n:::\n\n:::\n\nAnd that's it! Congratulations, now you know the syntax for a basic `for` loop! Now let's see it in practice. Now let's put it into practice. \n\n\n::: callout-note\nLet's say Europe is experiencing a heat wave, but I'm not quite grasping the context of how bad it is because I'm not familiar with the Celsius temperature scale. I know the average temperatures are somewhere between 35-40&deg;C, so I'll write a quick function to convert the temperatures into Fahrenheit! But that spans over five numbers, and writing that function out five individual times goes against the DRY principle. This gives us the perfect excuse to write a `for` loop. \n\nThe equation for converting temperatures from Celsius to Fahrenheit is the following. $$(deg C*1.8) + 32$$ \nKnowing that conversion formula, here's how I'd write my `for` loop:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(degC in 35:40){\n  # Write your statement. Make sure the output of the statement is assigned to an object,\n  # otherwise R will only remember the very last conversion value. \n  fahr <- (degC*1.8) + 32\n  \n  # Print the outputs\n  print(fahr)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 95\n[1] 96.8\n[1] 98.6\n[1] 100.4\n[1] 102.2\n[1] 104\n```\n:::\n:::\n\n\nYep, that's pretty toasty! \n:::\n\nFor more help on `for` loops and other iterative processes, make sure to check out the [R for Data Science](https://r4ds.had.co.nz/iteration.html#iteration) book by Hadley Wickham and Garrett Grolemund!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}